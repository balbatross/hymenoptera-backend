var express = require('express');
var bodyParser = require('body-parser')
var Route = require('./route')

class Server {
  constructor(opts, instance){
    if(!opts){
      this.app = instance
    }else{
      this.app = express()
    }
    this.port = this.app.address().port || opts.port
    this.routes = [] 
    this.app.use(bodyParser.json())
    if(!this.app.address().port){
      this.server = this.app.listen(this.port)
    }
  }

  registerRoute(route){
    this.routes.push(route);
    route.register(this.app)
  }

  register(opts){
    let r = new Route(opts);
    r.register(this.app)
    this.routes.push(r)
    return r;
  }

  stop(){
    this.server.close()
  }
}

module.exports = {

}
{
  id: 'base-express-server',
  name: 'Express',
  base: {module: Server, opts: {port: 'int'}},
  modules: [
  {
    key: 'register',
    config: {
      type: 'input',
      params: {
        route: 'string',
        method: 'string'
      },
      output:  {
        params: {},
        body: {},
        query: {}
      } 
    }
  }
  ]
}

const EventEmitter = require('events')

class Route extends EventEmitter {
  constructor(opts = {}){
    super();
    this.method = opts.method;
    this.route = opts.route;
    this.func = opts.func;
    this._handler = this._handler.bind(this)
  }

  _handler(req, res){
    let params = req.params;
    let body = req.body;
    let query = req.query;

    let data = {params: params, body: body, query: query}
    let promise = null
    this.emit('event', (p) => {
      promise = p
  
      promise.then((result) => {
          res.send(result)
      }, (err) => {
        res.send({error: err})
      })
    }, data)
    
  }

  register(app){
    let route = app.route(this.route)
    switch(this.method.toUpperCase()){
      case 'GET':
        route.get(this._handler)
        break
      case 'POST':
        route.post(this._handler)
        break
      case 'PUT':
        route.put(this._handler)
        break
      case 'DELETE':
        route.delete(this._handler)
        break
      default:
        return null
    }
  }
}

Route.node_spec = {
  opts: {
    method: 'string',
    route: 'string',
    func: 'function'
  },
  ports: {
    'trigger': 'out'
  }
}

module.exports = Route
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIiwicm91dGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzdEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJ0ZXN0Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xudmFyIGJvZHlQYXJzZXIgPSByZXF1aXJlKCdib2R5LXBhcnNlcicpXG52YXIgUm91dGUgPSByZXF1aXJlKCcuL3JvdXRlJylcblxuY2xhc3MgU2VydmVyIHtcbiAgY29uc3RydWN0b3Iob3B0cywgaW5zdGFuY2Upe1xuICAgIGlmKCFvcHRzKXtcbiAgICAgIHRoaXMuYXBwID0gaW5zdGFuY2VcbiAgICB9ZWxzZXtcbiAgICAgIHRoaXMuYXBwID0gZXhwcmVzcygpXG4gICAgfVxuICAgIHRoaXMucG9ydCA9IHRoaXMuYXBwLmFkZHJlc3MoKS5wb3J0IHx8IG9wdHMucG9ydFxuICAgIHRoaXMucm91dGVzID0gW10gXG4gICAgdGhpcy5hcHAudXNlKGJvZHlQYXJzZXIuanNvbigpKVxuICAgIGlmKCF0aGlzLmFwcC5hZGRyZXNzKCkucG9ydCl7XG4gICAgICB0aGlzLnNlcnZlciA9IHRoaXMuYXBwLmxpc3Rlbih0aGlzLnBvcnQpXG4gICAgfVxuICB9XG5cbiAgcmVnaXN0ZXJSb3V0ZShyb3V0ZSl7XG4gICAgdGhpcy5yb3V0ZXMucHVzaChyb3V0ZSk7XG4gICAgcm91dGUucmVnaXN0ZXIodGhpcy5hcHApXG4gIH1cblxuICByZWdpc3RlcihvcHRzKXtcbiAgICBsZXQgciA9IG5ldyBSb3V0ZShvcHRzKTtcbiAgICByLnJlZ2lzdGVyKHRoaXMuYXBwKVxuICAgIHRoaXMucm91dGVzLnB1c2gocilcbiAgICByZXR1cm4gcjtcbiAgfVxuXG4gIHN0b3AoKXtcbiAgICB0aGlzLnNlcnZlci5jbG9zZSgpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbn1cbntcbiAgaWQ6ICdiYXNlLWV4cHJlc3Mtc2VydmVyJyxcbiAgbmFtZTogJ0V4cHJlc3MnLFxuICBiYXNlOiB7bW9kdWxlOiBTZXJ2ZXIsIG9wdHM6IHtwb3J0OiAnaW50J319LFxuICBtb2R1bGVzOiBbXG4gIHtcbiAgICBrZXk6ICdyZWdpc3RlcicsXG4gICAgY29uZmlnOiB7XG4gICAgICB0eXBlOiAnaW5wdXQnLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIHJvdXRlOiAnc3RyaW5nJyxcbiAgICAgICAgbWV0aG9kOiAnc3RyaW5nJ1xuICAgICAgfSxcbiAgICAgIG91dHB1dDogIHtcbiAgICAgICAgcGFyYW1zOiB7fSxcbiAgICAgICAgYm9keToge30sXG4gICAgICAgIHF1ZXJ5OiB7fVxuICAgICAgfSBcbiAgICB9XG4gIH1cbiAgXVxufVxuIiwiY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJylcblxuY2xhc3MgUm91dGUgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBjb25zdHJ1Y3RvcihvcHRzID0ge30pe1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5tZXRob2QgPSBvcHRzLm1ldGhvZDtcbiAgICB0aGlzLnJvdXRlID0gb3B0cy5yb3V0ZTtcbiAgICB0aGlzLmZ1bmMgPSBvcHRzLmZ1bmM7XG4gICAgdGhpcy5faGFuZGxlciA9IHRoaXMuX2hhbmRsZXIuYmluZCh0aGlzKVxuICB9XG5cbiAgX2hhbmRsZXIocmVxLCByZXMpe1xuICAgIGxldCBwYXJhbXMgPSByZXEucGFyYW1zO1xuICAgIGxldCBib2R5ID0gcmVxLmJvZHk7XG4gICAgbGV0IHF1ZXJ5ID0gcmVxLnF1ZXJ5O1xuXG4gICAgbGV0IGRhdGEgPSB7cGFyYW1zOiBwYXJhbXMsIGJvZHk6IGJvZHksIHF1ZXJ5OiBxdWVyeX1cbiAgICBsZXQgcHJvbWlzZSA9IG51bGxcbiAgICB0aGlzLmVtaXQoJ2V2ZW50JywgKHApID0+IHtcbiAgICAgIHByb21pc2UgPSBwXG4gIFxuICAgICAgcHJvbWlzZS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICByZXMuc2VuZChyZXN1bHQpXG4gICAgICB9LCAoZXJyKSA9PiB7XG4gICAgICAgIHJlcy5zZW5kKHtlcnJvcjogZXJyfSlcbiAgICAgIH0pXG4gICAgfSwgZGF0YSlcbiAgICBcbiAgfVxuXG4gIHJlZ2lzdGVyKGFwcCl7XG4gICAgbGV0IHJvdXRlID0gYXBwLnJvdXRlKHRoaXMucm91dGUpXG4gICAgc3dpdGNoKHRoaXMubWV0aG9kLnRvVXBwZXJDYXNlKCkpe1xuICAgICAgY2FzZSAnR0VUJzpcbiAgICAgICAgcm91dGUuZ2V0KHRoaXMuX2hhbmRsZXIpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdQT1NUJzpcbiAgICAgICAgcm91dGUucG9zdCh0aGlzLl9oYW5kbGVyKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnUFVUJzpcbiAgICAgICAgcm91dGUucHV0KHRoaXMuX2hhbmRsZXIpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdERUxFVEUnOlxuICAgICAgICByb3V0ZS5kZWxldGUodGhpcy5faGFuZGxlcilcbiAgICAgICAgYnJlYWtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICB9XG59XG5cblJvdXRlLm5vZGVfc3BlYyA9IHtcbiAgb3B0czoge1xuICAgIG1ldGhvZDogJ3N0cmluZycsXG4gICAgcm91dGU6ICdzdHJpbmcnLFxuICAgIGZ1bmM6ICdmdW5jdGlvbidcbiAgfSxcbiAgcG9ydHM6IHtcbiAgICAndHJpZ2dlcic6ICdvdXQnXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSb3V0ZVxuIl19
